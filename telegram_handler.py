import logging
import telegram
from telegram.ext import Updater, CommandHandler
import matplotlib.pyplot as plt
import pandas as pd
import os
from datetime import datetime
from config import DEBUG

logger = logging.getLogger(__name__)

class TelegramHandler:
    def __init__(self, token, chat_id, strategy, history_file='data/history.csv'):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞"""
        self.bot = telegram.Bot(token=token)
        self.chat_id = chat_id
        self.strategy = strategy
        self.history_file = history_file
        self.updater = Updater(token=token, use_context=True)
        self._setup_handlers()
        self.signal_history = []
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.makedirs('images', exist_ok=True)
        os.makedirs('data', exist_ok=True)
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        try:
            dp = self.updater.dispatcher
            dp.add_handler(CommandHandler('start', self.start))
            dp.add_handler(CommandHandler('signal', self.get_signal))
            dp.add_handler(CommandHandler('history', self.get_history))
            dp.add_handler(CommandHandler('accuracy', self.get_accuracy))
            dp.add_handler(CommandHandler('graph', self.send_graph))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥: {str(e)}")
    
    def start(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            context.bot.send_message(
                chat_id=update.effective_chat.id,
                text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ XAU Trading Bot! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /signal, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª.'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {str(e)}")
    
    def get_signal(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /signal"""
        try:
            daily, fifteen_min = get_xau_data()
            signal = self.strategy.generate_signal(daily, fifteen_min)
            
            if signal:
                self.send_signal(signal)
                self._save_signal(signal)
                context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=self._format_signal(signal),
                    parse_mode='Markdown'
                )
            else:
                context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="–°–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω."
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /signal: {str(e)}")
    
    def send_signal(self, signal):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ Telegram"""
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
            plt.figure(figsize=(12, 6))
            plt.plot(signal['data']['Close'][-100:])
            plt.title(f"–°–∏–≥–Ω–∞–ª: {signal['signal']}")
            plt.savefig('images/latest_signal.png')
            plt.close()
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            with open('images/latest_signal.png', 'rb') as photo:
                self.bot.send_photo(chat_id=self.chat_id, photo=photo)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—Ä–æ–≤–Ω—è–º–∏
            self.bot.send_message(
                chat_id=self.chat_id,
                text=self._format_signal(signal),
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞: {str(e)}")
    
    def _format_signal(self, signal):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ Markdown"""
        try:
            return f"""
*–°–∏–≥–Ω–∞–ª*: {signal['signal']}
*–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞*: {signal['entry']:.2f}
*Take Profit*: {signal['tp']:.2f}
*Stop Loss*: {signal['sl']:.2f}
*–†–∏—Å–∫*: {signal['risk']:.2f}
*–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏*: {signal['accuracy']:.2%}
*–î–∞—Ç–∞*: {datetime.now().strftime('%Y-%m-%d %H:%M')}
"""
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {str(e)}")
            return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞"
    
    def _save_signal(self, signal):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        try:
            df = pd.DataFrame([{
                'timestamp': datetime.now(),
                'signal': signal['signal'],
                'entry': signal['entry'],
                'tp': signal['tp'],
                'sl': signal['sl'],
                'risk': signal['risk'],
                'accuracy': signal['accuracy']
            }])
            
            df.to_csv(self.history_file, mode='a', header=not os.path.exists(self.history_file), index=False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {str(e)}")
    
    def get_history(self, update, context):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫"""
        try:
            if not os.path.exists(self.history_file):
                context.bot.send_message(chat_id=update.effective_chat.id, text="–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
                
            df = pd.read_csv(self.history_file)
            
            if df.empty:
                context.bot.send_message(chat_id=update.effective_chat.id, text="–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –ø—É—Å—Ç–∞.")
                return
                
            history_text = "üìú *–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫*\n\n"
            
            for _, trade in df.tail(10).iterrows():
                history_text += f"üïí {trade['timestamp']}\n"
                history_text += f"üìà {trade['signal']} @ {trade['entry']}\n"
                history_text += f"üéØ TP: {trade['tp']}, SL: {trade['sl']}\n"
                history_text += f"üí∞ –†–∏—Å–∫: ${trade['risk']:.2f}\n"
                history_text += f"üìä –¢–æ—á–Ω–æ—Å—Ç—å: {trade['accuracy']:.1%}\n\n"
            
            context.bot.send_message(chat_id=update.effective_chat.id, text=history_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫: {str(e)}")
    
    def get_accuracy(self, update, context):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"""
        try:
            accuracy = self.strategy.model.accuracy if hasattr(self.strategy.model, 'accuracy') else 0
            context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"*–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏*: {accuracy:.2%}",
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
    
    def send_graph(self, update, context):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ equity"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ equity
            context.bot.send_message(chat_id=update.effective_chat.id, text="–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≥—Ä–∞—Ñ–∏–∫–∞ equity –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞"""
        try:
            self.updater.start_polling()
            logger.info("Telegram-–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞: {str(e)}")
